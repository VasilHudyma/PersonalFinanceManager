package com.finmanager.dao;

import com.finmanager.exceptions.DbOperationException;
import com.finmanager.exceptions.NotFoundException;
import com.finmanager.mapper.CategoryMapper;
import com.finmanager.model.Category;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.stereotype.Repository;

import javax.sql.DataSource;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

@Repository
public class CategoryDAOImpl implements IDao<Category> {

    private CategoryMapper categoryMapper;
    private JdbcTemplate jdbcTemplate;
    private static final Logger logger = LoggerFactory.getLogger(CategoryDAOImpl.class);

    @Autowired
    public CategoryDAOImpl(DataSource dataSource, CategoryMapper categoryMapper) {
        this.categoryMapper = categoryMapper;
        this.jdbcTemplate = new JdbcTemplate(dataSource);
    }

    @Override
    public Category create(Category category) {
        LocalDateTime time = LocalDateTime.now();
        category.setCreatedDate(time);
        category.setUpdatedDate(time);
        try {
            GeneratedKeyHolder keyHolder = new GeneratedKeyHolder();
            jdbcTemplate.update(connection -> createStatement(category, connection), keyHolder);
            category.setId((Long) Optional.ofNullable(Objects.requireNonNull(keyHolder.getKeys()).get("id"))
                    .orElseThrow(() -> new DbOperationException("Create Category Dao method error: AutoGeneratedKey = null")));
            return category;
        } catch (Exception e) {
            logger.error("Can't create category: {} Error: ", category, e);
            throw new DbOperationException("Can't create category with id = " + category.getId() + " Category: " + category + " " + e.getMessage());
        }
    }

    @Override
    public Category findById(Long id) {
        try {
            return jdbcTemplate.queryForObject(Queries.SQL_CATEGORY_FIND_BY_ID, categoryMapper, id);
        } catch (EmptyResultDataAccessException | NotFoundException e) {
            throw getAndLogCategoryNotFoundException(id);
        } catch (Exception e) {
            logger.error("Can't get category with id = {}. Error: ", id, e);
            throw new DbOperationException("Can't get category with id = " + id);
        }
    }

    @Override
    public Category update(Category category) {
        int rowsAffected;
        try {
            category.setUpdatedDate(LocalDateTime.now());
            rowsAffected = jdbcTemplate.update(Queries.SQL_CATEGORY_UPDATE,
                    category.getName(),
                    category.getDescription(),
                    category.getUpdatedDate(),
                    category.getId());
        } catch (Exception e) {
            logger.error("Updating category error: " + category + " " + e.getMessage());
            throw new DbOperationException("Can't update category: " + category);
        }
        if (rowsAffected < 1) {
            throw getAndLogCategoryNotFoundException(category.getId());
        }
        return category;
    }

    @Override
    public boolean delete(Long id) {
        int rowsAffected;
        try {
            rowsAffected = jdbcTemplate.update(Queries.SQL_CATEGORY_DELETE, id);
        } catch (Exception e) {
            logger.error("Deleting category with id = {} error: ", id, e);
            throw new DbOperationException("Deleting category with id = " + id + " error: " + e.getMessage());
        }
        if (rowsAffected < 1) {
            throw getAndLogCategoryNotFoundException(id);
        } else return true;
    }

    @Override
    public List<Category> findAll() {
        try {
            return jdbcTemplate.query(Queries.SQL_CATEGORY_FIND_ALL, categoryMapper);
        } catch (Exception e) {
            logger.error("Can't get all categories. Error: ", e);
            throw new DbOperationException("Can't get all categories. Error: " + e.getMessage());
        }
    }

    private PreparedStatement createStatement(Category category, Connection connection) throws SQLException {
        PreparedStatement ps = connection.prepareStatement(Queries.SQL_CATEGORY_CREATE, Statement.RETURN_GENERATED_KEYS);
        ps.setString(1, category.getName());
        ps.setString(2, category.getDescription());
        ps.setObject(3, category.getCreatedDate());
        ps.setObject(4, category.getUpdatedDate());

        return ps;
    }

    private NotFoundException getAndLogCategoryNotFoundException(Long id) {
        NotFoundException notFoundException = new NotFoundException("Category not found");
        logger.error("Runtime exception. Category not found id = {}. Message: {}", id, notFoundException.getMessage());
        return notFoundException;
    }

    private class Queries {
        static final String SQL_CATEGORY_CREATE = "INSERT INTO categories(name,description, created_date, updated_date) values (?,?,?,?)";
        static final String SQL_CATEGORY_DELETE = "DELETE FROM categories WHERE id=?";
        static final String SQL_CATEGORY_FIND_ALL = "SELECT * FROM categories";
        static final String SQL_CATEGORY_FIND_BY_ID = "SELECT * FROM categories WHERE id=?";
        static final String SQL_CATEGORY_UPDATE = "UPDATE categories set name = ?, description=?, updated_date = ? where id = ?";
    }
}
