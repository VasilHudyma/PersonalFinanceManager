package com.finmanager.dao;

import com.finmanager.exceptions.DbOperationException;
import com.finmanager.exceptions.NotFoundException;
import com.finmanager.mapper.OperationMapper;
import com.finmanager.model.Operation;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.stereotype.Repository;

import javax.sql.DataSource;
import java.time.LocalDateTime;
import java.util.List;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Optional;

@Repository
public class OperationDAOImpl implements IOperationDAO {

    private OperationMapper operationMapper;
    private JdbcTemplate jdbcTemplate;

    @Autowired
    public OperationDAOImpl(DataSource dataSource, OperationMapper operationMapper) {
        this.operationMapper = operationMapper;
        this.jdbcTemplate = new JdbcTemplate(dataSource);
    }


    @Override
    public Operation create(Operation operation) {
        try {
            GeneratedKeyHolder keyHolder = new GeneratedKeyHolder();
            LocalDateTime time = LocalDateTime.now();
            operation.setUpdatedDate(time);
            operation.setCreatedDate(time);
            jdbcTemplate.update(connection -> createStatement(operation, connection), keyHolder);
            operation.setId(Optional.ofNullable(keyHolder.getKey()).map(Number::longValue)
                    .orElseThrow(() -> new DbOperationException("Create Operation Dao method error: AutoGeneratedKey = null")));
            return operation;
        } catch (Exception e){
            throw new DbOperationException("Can't create operation by id = " + operation.getId() + " Operation: " + operation);
        }
    }

    @Override
    public Operation update(Operation operation) {
        return null;
    }

    @Override
    public boolean delete(Long id) {
        int rowsAffected;
        try {
            rowsAffected = jdbcTemplate.update(Queries.SQL_OPERATION_DELETE, id);
        } catch (Exception e) {
            throw new DbOperationException("Delete Role exception");
        }
        if (rowsAffected < 1) {
            throw new NotFoundException("Can't find operation");
        } else return true;
    }

    private PreparedStatement createStatement(Operation operation, Connection connection) throws SQLException {
        PreparedStatement ps = connection.prepareStatement(Queries.SQL_OPERATION_CREATE, Statement.RETURN_GENERATED_KEYS);
        ps.setString(1, operation.getName());
        ps.setObject(2, operation.getCreatedDate());
        ps.setObject(3, operation.getUpdatedDate());

        return ps;
    }

    @Override
    public Operation findById(Long id) {
        return null;
    }

    @Override
    public List<Operation> findAll() {
        return null;
    }

    class Queries {
        static final String SQL_OPERATION_CREATE = "INSERT INTO OPERATIONS(name, created_date, updated_date) values (?,?,?)";
        static final String SQL_OPERATION_DELETE = "DELETE FROM operations WHERE id=?";
        static final String SQL_OPERATION_FIND_ALL = "SELECT * FROM operations";
    }
}
