package com.finmanager.dao;

import com.finmanager.exceptions.DbOperationException;
import com.finmanager.exceptions.NotFoundException;
import com.finmanager.mapper.OperationMapper;
import com.finmanager.model.Operation;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.stereotype.Repository;

import javax.sql.DataSource;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

@Repository
public class OperationDAOImpl implements IDao<Operation> {

    private OperationMapper operationMapper;
    private JdbcTemplate jdbcTemplate;
    private static final Logger logger = LoggerFactory.getLogger(OperationDAOImpl.class);

    @Autowired
    public OperationDAOImpl(DataSource dataSource, OperationMapper operationMapper) {
        this.operationMapper = operationMapper;
        this.jdbcTemplate = new JdbcTemplate(dataSource);
    }


    @Override
    public Operation create(Operation operation) {
        try {
            GeneratedKeyHolder keyHolder = new GeneratedKeyHolder();
            LocalDateTime time = LocalDateTime.now();
            operation.setUpdatedDate(time);
            operation.setCreatedDate(time);
            jdbcTemplate.update(connection -> createStatement(operation, connection), keyHolder);
            operation.setId((Long) Optional.ofNullable(Objects.requireNonNull(keyHolder.getKeys()).get("id"))
                    .orElseThrow(() -> new DbOperationException("Create Operation Dao method error: AutoGeneratedKey = null")));
            return operation;
        } catch (Exception e) {
            logger.error("Can't create operation: {} Error: ", operation, e);
            throw new DbOperationException("Can't create operation by id = " + operation.getId() + " Operation: " + operation + " " + e.getMessage());
        }
    }

    @Override
    public Operation update(Operation operation) {
        int rowsAffected;
        try {
            LocalDateTime time = LocalDateTime.now();
            operation.setUpdatedDate(time);
            rowsAffected = this.jdbcTemplate.update(Queries.SQL_OPERATION_UPDATE,
                    operation.getName(),
                    time,
                    operation.getId());
        } catch (Exception e) {
            logger.error("Update operation error: " + operation + " " + e.getMessage());
            throw new DbOperationException("Can't update operation: " + operation);
        }
        if (rowsAffected < 1) {
            throw getAndLogOperationNotFoundException(operation.getId());
        }
        return operation;
    }

    @Override
    public boolean delete(Long id) {
        int rowsAffected;
        try {
            rowsAffected = jdbcTemplate.update(Queries.SQL_OPERATION_DELETE, id);
        } catch (Exception e) {
            logger.error("Deleting operation with id={} error: ", id, e);
            throw new DbOperationException("Delete Operation exception");
        }
        if (rowsAffected < 1) {
            throw getAndLogOperationNotFoundException(id);
        } else return true;
    }

    @Override
    public Operation findById(Long id) {
        try {
            return jdbcTemplate.queryForObject(Queries.SQL_OPERATION_FIND_BY_ID, operationMapper, id);
        } catch (EmptyResultDataAccessException | NotFoundException e) {
            throw getAndLogOperationNotFoundException(id);
        } catch (Exception e) {
            logger.error("Can't get operation with id={}. Error: ", id, e);
            throw new DbOperationException("Can't get operation with id=" + id);
        }

    }

    @Override
    public List<Operation> findAll() {
        try {
            return this.jdbcTemplate.query(Queries.SQL_OPERATION_FIND_ALL, operationMapper);
        } catch (Exception e) {
            logger.error("Can't get all operations. Error: ", e);
            throw new DbOperationException("Can't get all operations.");
        }

    }

    private PreparedStatement createStatement(Operation operation, Connection connection) throws SQLException {
        PreparedStatement ps = connection.prepareStatement(Queries.SQL_OPERATION_CREATE, Statement.RETURN_GENERATED_KEYS);
        ps.setString(1, operation.getName());
        ps.setObject(2, operation.getCreatedDate());
        ps.setObject(3, operation.getUpdatedDate());

        return ps;
    }

    private NotFoundException getAndLogOperationNotFoundException(Long id) {
        NotFoundException notFoundException = new NotFoundException("Operation not found");
        logger.error("Runtime exception. Operation not found id = {}. Message: {}", id, notFoundException.getMessage());
        return notFoundException;
    }

    private class Queries {
        static final String SQL_OPERATION_CREATE = "INSERT INTO OPERATIONS(name, created_date, updated_date) values (?,?,?)";
        static final String SQL_OPERATION_DELETE = "DELETE FROM operations WHERE id=?";
        static final String SQL_OPERATION_FIND_ALL = "SELECT * FROM operations";
        static final String SQL_OPERATION_FIND_BY_ID = "SELECT * FROM operations WHERE id=?";
        static final String SQL_OPERATION_UPDATE = "UPDATE operations set name = ?, updated_date = ? where id = ?";
    }
}
